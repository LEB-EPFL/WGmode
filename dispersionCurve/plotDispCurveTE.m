%------------------------------------------------------------------%
%               plotDispCurveTE - Main function                    %
%------------------------------------------------------------------%

%  [File name]	"plotDispCurveTE.m"
%  [Author]		"Anna Archetti"
%  [Version]		"1.0"
%  [Modified by]	"Anna Archetti"
%  [Date]			"19 March 2017"

% Application:
% This function is designed for a planar waveguide made by a substrate(ns) a
% core(n1) and a cladding(n0)

% Conditions:
% - ns < beta/k < n1 : to have the wavenumber k equal to a real number
% - the normalized frequency is computed only for TE mode
% - symmetric slab wg: gamma = 0

% Defintions:
% v: is the normalized frequency v = k^2*a^2(n1^2 - ns^2)
% 2a: is the width of the core of the waveguide [um]
% k: is the modulus of the compomponent of propagation vector K along the 
%   direction perpendicular to the propagation direction, along the smallest 
%   waveguide dimention (a)
% beta: is the modulus of the compomponent of propagation vector K along 
%       the propagation direction
% b: is the normalized propagation constant (ne^2 - ns^2)/(n1^2 - ns^2)
% ne: is the effective index = beta/k
% ns: is the refractive index of the substrate of the waveguide
% n1: is the refractive index of the waveguide core 
% m: mode numbers here (1:1:5)
% gamma: measure of the wg asymmetry of the ref indices = (ns^2 - n0^2)/(n1^2 - ns^2)

% The function computes 
% - different values of the variable v 
% - different valuse of the variable b as a function of v
% - find the roots (v) of the function 
%                     f(gamma, m, v, b) = m*pi + atan(sqrt(b/(1 - b))) +  ...
%                     atan(sqrt((b + gamma)/(1 - b))) - ...
%                     2*v*sqrt(1 - b) given different b values

% INPUTs:
% - n1: scalar
% - ns: scalar
% - neStep: distance between differents ne generated by the function
% - 2a: [um]
% - gamma: optional (default = [0, 5])

% OUTPUTs:
% - dispRelStruct: each element of the array correspond to a
%                  - differnt order m (columns)
%                  - differnt gamma (raw)
%                  each element has 4 fields:
%                   o order m name
%                   o gamma number
%                   o b(vector) and 
%                   o v(vector)
% - figure: plot of v vs b for each gamma value

function dispRelStruct = plotDispCurveTE(a2, n1, ns, neStep, gamma)
    
    % Check inputs
    if (nargin == 0)
        a2 = 0.2 % 2;
        n1 = 2.038; %1.5;
        ns = 1.4; %1.1;
        neStep = 0.01;
        gamma = [0, 0.44];
    elseif (nargin == 1)
        n1 = 1.5;
        ns = 2;
        neStep = 0.01;
        gamma = [0, 5];
    elseif (nargin == 2)
        ns = 2;
        neStep = 0.01;
        gamma = [0, 5];
    elseif (nargin == 3)
        neStep = 0.01;
        gamma = [0, 5]; 
    elseif (nargin == 4)
        gamma = [0, 5]; 
    end   
    
    % Define parameters
    m = (0:1:4);
%     m = 0;
    ne = (ns:neStep:n1);
    n02 = ns^2 - gamma*(n1^2 - ns^2);
    
    colorCur = jet(length(gamma)*length(m));
    
    % Build b
    b = (ne.^2 - ns^2)./(n1^2 - ns^2);
    figure,
    for gammaIdx = 1 : length(gamma)
        for mIdx = 1: length(m) 
    
            % Build v
            v = ( m(mIdx)*pi/2 + 1/2.*atan(sqrt(b./(1 - b))) ...
                + 1/2.*atan(sqrt((b + gamma(gammaIdx))./(1 - b))) )./sqrt(1 - b);
            
            dispRelStruct(gammaIdx, mIdx) = struct('m', m(mIdx), 'gamma', gamma(gammaIdx), ...
                'b', b, 'v', v); 
            
            plot(v, b, 'color', colorCur(mIdx + (gammaIdx - 1)*length(m), :), 'marker', '*')
            legendInfo{mIdx + (gammaIdx - 1)*length(m)} = ...
                ['gamma = ', num2str(gamma(gammaIdx)) ', m = ' num2str(m(mIdx)) ];
            hold on
        end  
    end
    xlabel('normalized frequency v')
    ylabel('normalized propagation constant b')
    axis([0 10 0 1])
    title('Disperstion curve - TE modes - Slab WG')
    legend(legendInfo)
    set(gca,'color','none')
   
    h1 = figure;
    h2 = figure;
    % Build b
    %b = (ne.^2 - ns^2)./(n1^2 - ns^2);
    clear v, clear b,
    
    
    h1,
    h2,
    for gammaIdx = 1 : length(gamma)
        for mIdx = 1: length(m)  
            %disp('length b')
            %disp(length(b))
            figure(h1)
%             clear v,
            v = (1.7*m(mIdx) + 0.1 + gamma(gammaIdx)/10: 0.5 : 20);
            for rootIdx = 1: length(v) 
                
%                 myFunc = @(v) m(mIdx)*pi + atan(sqrt(b(rootIdx)./(1 - b(rootIdx)))) +  ...
%                     atan(sqrt((b(rootIdx) + gamma(gammaIdx))./(1 - b(rootIdx)))) - ...
%                     2*v*sqrt(1 - b(rootIdx));         
                mTemp = m(mIdx);
                gammaTemp = gamma(gammaIdx);
                vTemp = v(rootIdx);
                
                
                myFunc = @(b) vTemp.*sqrt(1 - b) - mTemp.*pi.*0.5 ...
                    - atan(sqrt(b./(1 - b))).*0.5  ...
                    - atan(sqrt((b + gammaTemp)./(1 - b))).*0.5;

                    
                [xRoot(rootIdx), yRoot(rootIdx)] = findCFRootBisection(myFunc, [0, 1], 0.001, 10^8);          
            %disp('rootIdx')           
            %disp(rootIdx)
            end
            figure(h2)
%             dispRelStructBis(gammaIdx, mIdx) = struct('m', m(mIdx), 'gamma', gamma(gammaIdx), ...
%                 'bTE', b(1:end-1), 'vTE', xRoot); 
            
             dispRelStructBis(gammaIdx, mIdx) = struct('m', m(mIdx), 'gamma', gamma(gammaIdx), ...
                'bTE',xRoot, 'vTE', v); 
            plot(v, xRoot, 'color', colorCur(mIdx + (gammaIdx - 1)*length(m), :), 'marker', '*')
%             plot(v(1:end-1), xRoot, 'color', colorCur(mIdx + (gammaIdx - 1)*length(m), :), 'marker', '*')
            legendInfo{mIdx + (gammaIdx - 1)*length(m)} = ...
                ['gamma = ', num2str(gamma(gammaIdx)) ', m = ' num2str(m(mIdx)) ];
            hold on   
            clear v, 
            clear xRoot, clear yRoot
        end
    end
    xlabel('normalized frequency v')
    ylabel('normalized propagation constant b')
    axis([0 10 0 1])
    title('Disperstion curve - TE modes - Slab WG - Bisection')
    legend(legendInfo)
    set(gca,'color','none')
    
    
    % Build b
    b = (ne.^2 - ns^2)./(n1^2 - ns^2);
    h3 = figure;
    gammaIdx = 2;
    colorCur = jet(2*length(m));
    for mIdx = 1: length(m) 
        figure(h3)
        % Build v
        vTM = ( m(mIdx)*pi/2 + 1/2.*atan(n1^2/ns^2.*sqrt(b./(1 - b))) ...
            + 1/2.*atan(n1^2/n02(gammaIdx).*sqrt((b + gamma(gammaIdx))./(1 - b))) )./sqrt(1 - b);

        plot(dispRelStructBis(gammaIdx, mIdx).vTE, dispRelStructBis(gammaIdx, mIdx).bTE, 'color', colorCur(2*mIdx - 1, :), 'marker', '*')
        hold on
        plot(vTM, b, 'color', colorCur(2*mIdx, :), 'marker', '*')
        legendInfo{2*mIdx - 1} = ...
            ['TE mode: m = ' num2str(m(mIdx)) ];
        legendInfo{2*mIdx} = ...
            ['TM mode: m = ' num2str(m(mIdx)) ];
        hold on
    end  
    xlabel('normalized frequency v')
    ylabel('normalized propagation constant b')
    axis([0 10 0 1])
    title('Disperstion curve - TE and TM modes - Slab WG')
    legend(legendInfo)
    set(gca,'color','none')
    
    
end