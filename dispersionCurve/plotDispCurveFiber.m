%------------------------------------------------------------------%
%               plotDispCurveFiber - Main function                    %
%------------------------------------------------------------------%

%  [File name]	"plotDispCurveFiber.m"
%  [Author]		"Anna Archetti"
%  [Version]		"1.0"
%  [Modified by]	"Anna Archetti"
%  [Date]			"02 May 2017"

% Application:
% This function is designed for a optical fiber made by a
% core(n1) and a cladding(n0)

% Dispersion function:
% f(u,w)= Jm(u)/(u*Jm-1(u)) + Km(w)/(w*Km-1(w))
% 
% where:
% u = v*sqrt(1-b)
% w = v*sqrt(b)
%
% f(b, v) = J(m, v*sqrt(1-b))/(v*sqrt(1-b)*J(m-1, v*sqrt(1-b))) + K(m, v*sqrt(b))/(v*sqrt(b)*K(m-1, v*sqrt(b)))
% 
% where m = 0
% 
% Intervals Suggestions:
% HE11 
% plotDispCurveFiber(2, 0, 1.5, 1.1, 0.01, 0, (3.9:0.01:5.1), [0.5, 1]);
% plotDispCurveFiber(2, 0, 1.5, 1.1, 0.01, 0, (1:0.01:2.4), [0.001, 1]);
% HE12
% plotDispCurveFiber(2, 0, 1.5, 1.1, 0.01, 0, (4.1:0.01:5), [0.0001, 0.25]);
% 

% Defintions:
% v: is the normalized frequency v = k^2*a^2(n1^2 - ns^2)
% 2a: is the width of the core of the waveguide [um]
% k: is the modulus of the compomponent of propagation vector K along the 
%   direction perpendicular to the propagation direction, along the smallest 
%   waveguide dimention (a)
% beta: is the modulus of the compomponent of propagation vector K along 
%       the propagation direction
% b: is the normalized propagation constant (ne^2 - ns^2)/(n1^2 - ns^2)
% ne: is the effective index = beta/k
% ns: is the refractive index of the substrate of the waveguide
% n1: is the refractive index of the waveguide core 
% m: mode numbers here (1:1:5)
% gamma: measure of the wg asymmetry of the ref indices = (ns^2 - n0^2)/(n1^2 - ns^2)

% The function computes 
% - different values of the variable v 
% - different valuse of the variable b as a function of v
% - find the roots (v) of the function 
%                     f(b, v) = J(m, v*sqrt(1-b))/(v*sqrt(1-b)*J(m-1, v*sqrt(1-b)))...
%                             + K(m, v*sqrt(b))/(v*sqrt(b)*K(m-1, v*sqrt(b)))
%                             given different b values

% INPUTs:
% - n1: scalar
% - ns: scalar
% - neStep: distance between differents ne generated by the function
% - 2a: [um]
% - gamma: optional (default = [0, 5])

% OUTPUTs:
% - dispRelStruct: each element of the array correspond to a
%                  - differnt order m (columns)
%                  - differnt gamma (raw)
%                  each element has 4 fields:
%                   o order m name
%                   o gamma number
%                   o b(vector) and 
%                   o v(vector)
% - figure: plot of v vs b for each gamma value




function dispRelStruct = plotDispCurveFiber(a2, m ,n1, ns, neStep, gamma, v, bInt)

    
    % Check inputs
    if (nargin == 0)
        a2 = 2;
        m = 0;
        n1 = 1.5; %1.5;
        ns = 1.1 %1.1;
        neStep = 0.01;
        gamma = 0;
        v = (1 : 0.01 : 2.4);
        bInt = [0.001, 1];
    elseif (nargin == 1)
        m = 0; 
        n1 = 1.5;
        ns = 2;
        neStep = 0.01;
        gamma = 0;
        v = (1 : 0.01 : 2.4);
        bInt = [0.001, 1];
    elseif (nargin == 2)
        n1 = 1.5;
        ns = 2;
        neStep = 0.01;
        gamma = 0;
        v = (1 : 0.01 : 2.4);
        bInt = [0.001, 1];
    elseif (nargin == 3)
        neStep = 0.01;
        gamma = 0; 
        v = (1 : 0.01 : 2.4);
        bInt = [0.001, 1];
    elseif (nargin == 4)
        gamma = 0; 
        v = (1 : 0.01 : 2.4);
        bInt = [0.001, 1];
    elseif (nargin == 4)   
        v = (1 : 0.01 : 2.4);
        bInt = [0.001, 1];
    elseif (nargin == 4)   
        bInt = [0.001, 1];
    end   
    
    % Define parameters  
    colorCur = jet(length(gamma)*length(m));
  
    h1 = figure;
    h2 = figure;

    figure(h1)
%     v = (1 : 0.01 : 2.4);
    bTemp = (0.01:neStep:1);
       
    for rootIdx = 1: length(v) 
        
        vTemp = v(rootIdx);
        myFunc = @(b) besselj(m, vTemp.*sqrt(1-b)) ./ ( vTemp.*sqrt(1-b) .* besselj(m-1, vTemp.*sqrt(1-b)) )...
                + besselk(m, vTemp.*sqrt(b)) ./ ( vTemp.*sqrt(b) .* besselk(m-1, vTemp.*sqrt(b)) );
            
        myDiscrFunc = besselj(m, vTemp.*sqrt(1-bTemp)) ./ ( vTemp.*sqrt(1-bTemp) .* besselj(m-1, vTemp.*sqrt(1-bTemp)) )...
                + besselk(m, vTemp.*sqrt(bTemp)) ./ ( vTemp.*sqrt(bTemp) .* besselk(m-1, vTemp.*sqrt(bTemp)) );

         
         plot(bTemp, myDiscrFunc) 
         drawnow, 
         [xRoot(rootIdx), yRoot(rootIdx)] = findCFRootBisection(myFunc, bInt, 0.01, 10^8);
        %[xRoot(rootIdx), yRoot(rootIdx)] = findRootBisection(b, myDiscrFunc, 1);

    
    end

    figure(h2)
    
    
            
%     dispRelStructBis(gammaIdx, mIdx) = struct('m', m(mIdx), 'gamma', gamma(gammaIdx), ...
%         'bTE',xRoot, 'vTE', v);
    mIdx = 1;
    gammaIdx = 1;
    plot(v, xRoot, 'color', colorCur(mIdx + (gammaIdx - 1)*length(m), :), 'marker', '*')
%             plot(v(1:end-1), xRoot, 'color', colorCur(mIdx + (gammaIdx - 1)*length(m), :), 'marker', '*')
    legendInfo{mIdx + (gammaIdx - 1)*length(m)} = ...
        ['gamma = ', num2str(gamma(gammaIdx)) ', m = ' num2str(m(mIdx)) ];
    hold on   
    clear v, 
    clear xRoot, clear yRoot

    xlabel('normalized frequency v')
    ylabel('normalized propagation constant b')
    axis([0 10 0 1])
    title('Disperstion curve - HE11 mode - Fiber - Bisection')
    legend(legendInfo)
    set(gca,'color','none')
    
    
end